// TM1637 - Version: Latest
#include <TM1637Display.h>

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/50517248-2ce3-4b53-b1d1-1f8d85dfb57c

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudSchedule sleepTime;
  CloudSchedule wakeTime;
  bool defaultState;
  CloudTime averageSleepTime;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

// current time
int hour;
int minute;
int totalTime;
int currentTime;

// sleep tracking
int startSleep;
int endSleep;

// light control
int lightIntensity = 1024;
// pulsing light
int minIntensity = 0;
int maxIntensity = 1024;
int step = 16;
bool increasing = true;

// 4 digit display
#define CLK 13
#define DIO 14
#define LED 33
#define LEDGATE 25

TM1637Display display = TM1637Display(CLK, DIO);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  display.setBrightness(5);
  ledcAttachPin(LED, 0);
  ledcSetup(0, 12000, 10);

  pinMode(LEDGATE, OUTPUT);
  digitalWrite(LEDGATE, HIGH);
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  if (ArduinoCloud.connected()) {
    currentTime = ArduinoCloud.getLocalTime();
    hour = (currentTime / 3600) % 24;
    minute = (currentTime / 60) % 60;
    totalTime = hour * 100 + minute;
    display.showNumberDecEx(totalTime, 0b11100000, false, 4, 0);
    if (wakeTime.isActive()) {
      averageSleepTime = (averageSleepTime + currentTime - startSleep) / 2;
      incrementLightIntensity();
      delay(50);
    } else if (sleepTime.isActive()) {
      startSleep = currentTime;
      pulseLightIntensity();
      delay(25);
    } else {
      if (defaultState == false) {
        lightIntensity = 1024;
      } else if (defaultState == true) {
        lightIntensity = 0;
      }
      delay(1000);
    }
    ledcWrite(0, lightIntensity);
  }
}

void incrementLightIntensity() {
  if (lightIntensity > 0) {
    lightIntensity--;
  }
}

void pulseLightIntensity() {
  if (increasing) {
    lightIntensity += step;

    if (lightIntensity >= maxIntensity) {
      increasing = false;
    }
  } else {
    lightIntensity -= step;

    if (lightIntensity <= minIntensity) {
      increasing = true;
    }
  }
}



/*
  Since WakeTime is READ_WRITE variable, onWakeTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWakeTimeChange()  {
  // Add your code here to act upon WakeTime change
}


/*
  Since SleepTime is READ_WRITE variable, onSleepTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSleepTimeChange()  {
  // Add your code here to act upon SleepTime change
}



/*
  Since DefaultState is READ_WRITE variable, onDefaultStateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDefaultStateChange()  {
  // Add your code here to act upon DefaultState change
}

/*
  Since TotalSleepTime is READ_WRITE variable, onTotalSleepTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTotalSleepTimeChange()  {
  // Add your code here to act upon TotalSleepTime change
}

/*
  Since AverageSleepTime is READ_WRITE variable, onAverageSleepTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAverageSleepTimeChange()  {
  // Add your code here to act upon AverageSleepTime change
}
